{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompletionListener = void 0;\n\nconst Rx = __importStar(require(\"rxjs\"));\n\nconst operators_1 = require(\"rxjs/operators\");\n/**\n * Provides logic to determine whether lists of commands ran successfully.\n*/\n\n\nclass CompletionListener {\n  constructor(_ref) {\n    let {\n      successCondition = 'all',\n      scheduler\n    } = _ref;\n    this.successCondition = successCondition;\n    this.scheduler = scheduler;\n  }\n\n  isSuccess(events) {\n    if (this.successCondition === 'first') {\n      return events[0].exitCode === 0;\n    } else if (this.successCondition === 'last') {\n      return events[events.length - 1].exitCode === 0;\n    }\n\n    const commandSyntaxMatch = this.successCondition.match(/^!?command-(.+)$/);\n\n    if (commandSyntaxMatch == null) {\n      // If not a `command-` syntax, then it's an 'all' condition or it's treated as such.\n      return events.every(_ref2 => {\n        let {\n          exitCode\n        } = _ref2;\n        return exitCode === 0;\n      });\n    } // Check `command-` syntax condition.\n    // Note that a command's `name` is not necessarily unique,\n    // in which case all of them must meet the success condition.\n\n\n    const nameOrIndex = commandSyntaxMatch[1];\n    const targetCommandsEvents = events.filter(_ref3 => {\n      let {\n        command,\n        index\n      } = _ref3;\n      return command.name === nameOrIndex || index === Number(nameOrIndex);\n    });\n\n    if (this.successCondition.startsWith('!')) {\n      // All commands except the specified ones must exit succesfully\n      return events.every(event => targetCommandsEvents.includes(event) || event.exitCode === 0);\n    } // Only the specified commands must exit succesfully\n\n\n    return targetCommandsEvents.length > 0 && targetCommandsEvents.every(event => event.exitCode === 0);\n  }\n  /**\n   * Given a list of commands, wait for all of them to exit and then evaluate their exit codes.\n   *\n   * @returns A Promise that resolves if the success condition is met, or rejects otherwise.\n   */\n\n\n  listen(commands) {\n    const closeStreams = commands.map(command => command.close);\n    return Rx.merge(...closeStreams).pipe((0, operators_1.bufferCount)(closeStreams.length), (0, operators_1.switchMap)(exitInfos => this.isSuccess(exitInfos) ? Rx.of(exitInfos, this.scheduler) : Rx.throwError(exitInfos, this.scheduler)), (0, operators_1.take)(1)).toPromise();\n  }\n\n}\n\nexports.CompletionListener = CompletionListener;\n;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","exports","CompletionListener","Rx","require","operators_1","constructor","successCondition","scheduler","isSuccess","events","exitCode","length","commandSyntaxMatch","match","every","nameOrIndex","targetCommandsEvents","filter","command","index","name","Number","startsWith","event","includes","listen","commands","closeStreams","map","close","merge","pipe","bufferCount","switchMap","exitInfos","of","throwError","take","toPromise"],"sources":["C:/Users/Abhishek/Desktop/Complaint-Management/node_modules/concurrently/dist/src/completion-listener.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CompletionListener = void 0;\nconst Rx = __importStar(require(\"rxjs\"));\nconst operators_1 = require(\"rxjs/operators\");\n/**\n * Provides logic to determine whether lists of commands ran successfully.\n*/\nclass CompletionListener {\n    constructor({ successCondition = 'all', scheduler }) {\n        this.successCondition = successCondition;\n        this.scheduler = scheduler;\n    }\n    isSuccess(events) {\n        if (this.successCondition === 'first') {\n            return events[0].exitCode === 0;\n        }\n        else if (this.successCondition === 'last') {\n            return events[events.length - 1].exitCode === 0;\n        }\n        const commandSyntaxMatch = this.successCondition.match(/^!?command-(.+)$/);\n        if (commandSyntaxMatch == null) {\n            // If not a `command-` syntax, then it's an 'all' condition or it's treated as such.\n            return events.every(({ exitCode }) => exitCode === 0);\n        }\n        // Check `command-` syntax condition.\n        // Note that a command's `name` is not necessarily unique,\n        // in which case all of them must meet the success condition.\n        const nameOrIndex = commandSyntaxMatch[1];\n        const targetCommandsEvents = events.filter(({ command, index }) => (command.name === nameOrIndex\n            || index === Number(nameOrIndex)));\n        if (this.successCondition.startsWith('!')) {\n            // All commands except the specified ones must exit succesfully\n            return events.every((event) => (targetCommandsEvents.includes(event)\n                || event.exitCode === 0));\n        }\n        // Only the specified commands must exit succesfully\n        return targetCommandsEvents.length > 0\n            && targetCommandsEvents.every(event => event.exitCode === 0);\n    }\n    /**\n     * Given a list of commands, wait for all of them to exit and then evaluate their exit codes.\n     *\n     * @returns A Promise that resolves if the success condition is met, or rejects otherwise.\n     */\n    listen(commands) {\n        const closeStreams = commands.map(command => command.close);\n        return Rx.merge(...closeStreams)\n            .pipe((0, operators_1.bufferCount)(closeStreams.length), (0, operators_1.switchMap)(exitInfos => this.isSuccess(exitInfos)\n            ? Rx.of(exitInfos, this.scheduler)\n            : Rx.throwError(exitInfos, this.scheduler)), (0, operators_1.take)(1))\n            .toPromise();\n    }\n}\nexports.CompletionListener = CompletionListener;\n;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}