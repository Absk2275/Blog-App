{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExpandArguments = void 0;\n\nconst shell_quote_1 = require(\"shell-quote\");\n/**\n * Replace placeholders with additional arguments.\n */\n\n\nclass ExpandArguments {\n  constructor(additionalArguments) {\n    this.additionalArguments = additionalArguments;\n  }\n\n  parse(commandInfo) {\n    const command = commandInfo.command.replace(/\\\\?\\{([@\\*]|[1-9][0-9]*)\\}/g, (match, placeholderTarget) => {\n      // Don't replace the placeholder if it is escaped by a backslash.\n      if (match.startsWith('\\\\')) {\n        return match.substring(1);\n      } // Replace numeric placeholder if value exists in additional arguments.\n\n\n      if (!isNaN(placeholderTarget) && placeholderTarget <= this.additionalArguments.length) {\n        return (0, shell_quote_1.quote)([this.additionalArguments[placeholderTarget - 1]]);\n      } // Replace all arguments placeholder.\n\n\n      if (placeholderTarget === '@') {\n        return (0, shell_quote_1.quote)(this.additionalArguments);\n      } // Replace combined arguments placeholder.\n\n\n      if (placeholderTarget === '*') {\n        return (0, shell_quote_1.quote)([this.additionalArguments.join(' ')]);\n      } // Replace placeholder with empty string\n      // if value doesn't exist in additional arguments.\n\n\n      return '';\n    });\n    return Object.assign({}, commandInfo, {\n      command\n    });\n  }\n\n}\n\nexports.ExpandArguments = ExpandArguments;","map":{"version":3,"names":["Object","defineProperty","exports","value","ExpandArguments","shell_quote_1","require","constructor","additionalArguments","parse","commandInfo","command","replace","match","placeholderTarget","startsWith","substring","isNaN","length","quote","join","assign"],"sources":["C:/Users/Abhishek/Desktop/Complaint-Management/node_modules/concurrently/dist/src/command-parser/expand-arguments.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExpandArguments = void 0;\nconst shell_quote_1 = require(\"shell-quote\");\n/**\n * Replace placeholders with additional arguments.\n */\nclass ExpandArguments {\n    constructor(additionalArguments) {\n        this.additionalArguments = additionalArguments;\n    }\n    parse(commandInfo) {\n        const command = commandInfo.command.replace(/\\\\?\\{([@\\*]|[1-9][0-9]*)\\}/g, (match, placeholderTarget) => {\n            // Don't replace the placeholder if it is escaped by a backslash.\n            if (match.startsWith('\\\\')) {\n                return match.substring(1);\n            }\n            // Replace numeric placeholder if value exists in additional arguments.\n            if (!isNaN(placeholderTarget) &&\n                placeholderTarget <= this.additionalArguments.length) {\n                return (0, shell_quote_1.quote)([this.additionalArguments[placeholderTarget - 1]]);\n            }\n            // Replace all arguments placeholder.\n            if (placeholderTarget === '@') {\n                return (0, shell_quote_1.quote)(this.additionalArguments);\n            }\n            // Replace combined arguments placeholder.\n            if (placeholderTarget === '*') {\n                return (0, shell_quote_1.quote)([this.additionalArguments.join(' ')]);\n            }\n            // Replace placeholder with empty string\n            // if value doesn't exist in additional arguments.\n            return '';\n        });\n        return Object.assign({}, commandInfo, {\n            command,\n        });\n    }\n}\nexports.ExpandArguments = ExpandArguments;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AACA,MAAMC,aAAa,GAAGC,OAAO,CAAC,aAAD,CAA7B;AACA;AACA;AACA;;;AACA,MAAMF,eAAN,CAAsB;EAClBG,WAAW,CAACC,mBAAD,EAAsB;IAC7B,KAAKA,mBAAL,GAA2BA,mBAA3B;EACH;;EACDC,KAAK,CAACC,WAAD,EAAc;IACf,MAAMC,OAAO,GAAGD,WAAW,CAACC,OAAZ,CAAoBC,OAApB,CAA4B,6BAA5B,EAA2D,CAACC,KAAD,EAAQC,iBAAR,KAA8B;MACrG;MACA,IAAID,KAAK,CAACE,UAAN,CAAiB,IAAjB,CAAJ,EAA4B;QACxB,OAAOF,KAAK,CAACG,SAAN,CAAgB,CAAhB,CAAP;MACH,CAJoG,CAKrG;;;MACA,IAAI,CAACC,KAAK,CAACH,iBAAD,CAAN,IACAA,iBAAiB,IAAI,KAAKN,mBAAL,CAAyBU,MADlD,EAC0D;QACtD,OAAO,CAAC,GAAGb,aAAa,CAACc,KAAlB,EAAyB,CAAC,KAAKX,mBAAL,CAAyBM,iBAAiB,GAAG,CAA7C,CAAD,CAAzB,CAAP;MACH,CAToG,CAUrG;;;MACA,IAAIA,iBAAiB,KAAK,GAA1B,EAA+B;QAC3B,OAAO,CAAC,GAAGT,aAAa,CAACc,KAAlB,EAAyB,KAAKX,mBAA9B,CAAP;MACH,CAboG,CAcrG;;;MACA,IAAIM,iBAAiB,KAAK,GAA1B,EAA+B;QAC3B,OAAO,CAAC,GAAGT,aAAa,CAACc,KAAlB,EAAyB,CAAC,KAAKX,mBAAL,CAAyBY,IAAzB,CAA8B,GAA9B,CAAD,CAAzB,CAAP;MACH,CAjBoG,CAkBrG;MACA;;;MACA,OAAO,EAAP;IACH,CArBe,CAAhB;IAsBA,OAAOpB,MAAM,CAACqB,MAAP,CAAc,EAAd,EAAkBX,WAAlB,EAA+B;MAClCC;IADkC,CAA/B,CAAP;EAGH;;AA9BiB;;AAgCtBT,OAAO,CAACE,eAAR,GAA0BA,eAA1B"},"metadata":{},"sourceType":"script"}